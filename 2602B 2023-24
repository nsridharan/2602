#include "vex.h"

using namespace vex;

// A global instance of competition
competition Competition;

// Define your global instances of motors and other devices here
motor LeftRMotor = motor(PORT8, ratio6_1, true);
motor LeftFMotor = motor(PORT2, ratio6_1, false);
motor RightRMotor = motor(PORT3, ratio6_1, true);
motor RightFMotor = motor(PORT4, ratio6_1, true);
motor RightUPMotor = motor(PORT5, ratio6_1, false);
motor LeftUPMotor = motor(PORT9, ratio6_1, false);
motor IntakeMotor = motor(PORT1, ratio6_1, true);
motor CataMotor = motor(PORT6, ratio6_1, false);
controller Controller1 = controller(primary);






void pre_auton(void) {
    // Initializing Robot Configuration. DO NOT REMOVE!
    vexcodeInit();
    // All activities that occur before the competition starts



    wait(2, sec);
}

void autonomous(void) {
    motor_group drivetrain = motor_group(LeftRMotor, LeftFMotor, RightRMotor, RightFMotor, LeftUPMotor, RightUPMotor);
    motor_group leftMotors = motor_group(LeftRMotor, LeftFMotor, LeftUPMotor);
    motor_group rightMotors = motor_group(RightRMotor, RightFMotor, RightUPMotor);
    drivetrain.setVelocity(60, pct);
    leftMotors.setVelocity(100, pct);
    rightMotors.setVelocity(100, pct); 
    drivetrain.spin(reverse);
    wait(0.36, sec);
    drivetrain.stop();
    // intake it 
    IntakeMotor.setVelocity(100, pct);
    IntakeMotor.spin(reverse);
    // turning 
    leftMotors.spin(forward);
    rightMotors.spin(reverse);
    wait(0.17, sec);
    leftMotors.stop();
    rightMotors.stop();
    drivetrain.spin(reverse);
    wait(0.8, sec);
    drivetrain.stop();
    IntakeMotor.setVelocity(100, pct);
    IntakeMotor.spin(forward);
    wait(0.65, sec);
    IntakeMotor.stop();
    drivetrain.spin(forward);
    wait(0.13, sec);
    drivetrain.stop();
    // turning 
    leftMotors.spin(forward);
    rightMotors.spin(reverse);
    wait(0.285, sec);
    leftMotors.stop();
    rightMotors.stop();
    // driving forward
    drivetrain.spin(reverse);
    wait(1.35, sec);
    drivetrain.stop();
    //suckit
    IntakeMotor.setVelocity(100, pct);
    IntakeMotor.spin(forward);
    wait(0.65, sec);
    IntakeMotor.stop();
    drivetrain.spin(forward);
    wait(0.5, sec);
    drivetrain.stop();
    /*// driving forward w/ triball 
    drivetrain.spin(reverse);
    wait(1, sec);
    drivetrain.stop();
    // turning 
    leftMotors.spin(reverse);
    rightMotors.spin(forward);
    wait(0.5, sec);
    leftMotors.stop();
    rightMotors.stop();

    drivetrain.setVelocity(100, pct); 
    drivetrain.spin(reverse);
    wait(0.5, sec);

    drivetrain.stop();*/
}


void usercontrol(void) {
    while (1) {
        double forward_backward = -Controller1.Axis3.position();
        double turn = -Controller1.Axis1.position();
        double kp_turn = 5; 
        double kp_forward = 5.0; 
        double forwardAdjustment = forward_backward * kp_forward;
        double turnAdjustment = turn * kp_turn;
        double left_speed = (forwardAdjustment + turnAdjustment) * 0.5;
        double right_speed = (forwardAdjustment - turnAdjustment) * 0.5;

        LeftFMotor.spin(vex::directionType::fwd, left_speed, vex::velocityUnits::pct);
        LeftRMotor.spin(vex::directionType::fwd, left_speed, vex::velocityUnits::pct);
        LeftUPMotor.spin(vex::directionType::fwd, left_speed, vex::velocityUnits::pct);
        RightFMotor.spin(vex::directionType::fwd, right_speed, vex::velocityUnits::pct);
        RightRMotor.spin(vex::directionType::fwd, right_speed, vex::velocityUnits::pct);
        RightUPMotor.spin(vex::directionType::fwd, right_speed, vex::velocityUnits::pct);

        // Intake Code
        if (Controller1.ButtonL2.pressing()) {
            IntakeMotor.setVelocity(100, pct);
            IntakeMotor.spin(forward);
        } else if (Controller1.ButtonL1.pressing()) {
            IntakeMotor.setVelocity(100, pct);
            IntakeMotor.spin(reverse);
        } else {
            IntakeMotor.stop();
        }
        wait(20, msec);

        // Cata Code
        if (Controller1.ButtonR1.pressing()) {
            CataMotor.setVelocity(100, pct);
            CataMotor.spin(reverse);
        } else if (Controller1.ButtonR2.pressing()) {
            CataMotor.setVelocity(100, pct);
            CataMotor.spin(fwd);
        } else {
            CataMotor.stop();
        }
    }
}

// Main will set up the competition functions and callbacks.
int main() {
    // Set up callbacks for autonomous and driver control periods.
    Competition.autonomous(autonomous);
    Competition.drivercontrol(usercontrol);

    // Run the pre-autonomous function.
    pre_auton();

    // Prevent main from exiting with an infinite loop.
    while (true) {
        wait(100, msec);
    }
}
